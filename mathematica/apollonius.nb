(******************************************************************************)
(*                                 LICENSE                                    *)
(******************************************************************************)
(*  This file is free software: you can redistribute it and/or modify         *)
(*  it under the terms of the GNU General Public License as published by      *)
(*  the Free Software Foundation, either version 3 of the License, or         *)
(*  (at your option) any later version.                                       *)
(*                                                                            *)
(*  This file is distributed in the hope that it will be useful,              *)
(*  but WITHOUT ANY WARRANTY; without even the implied warranty of            *)
(*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the             *)
(*  GNU General Public License for more details.                              *)
(*                                                                            *)
(*  You should have received a copy of the GNU General Public License         *)
(*  along with This file. If not, see <https://www.gnu.org/licenses/>.        *)
(******************************************************************************)
(*  Purpose:                                                                  *)
(*      Code from Peter Doyle's course. Draws the Apollonius gasket.          *)
(******************************************************************************)

(*  Peter sure loves his Tau.                                                 *)
Tau = 2 Pi

(*  Draw Circles.                                                             *)

(*  Routine for computing the squared distance between points.                *)
SquaredDistance[a_, b_] := (a - b) . (a - b)

(*  The center of the circle passing through three points. Note, this will    *)
(*  fail if the three points fall on a straight line.                         *)
CenterOfCircle[{a_, b_, c_}] := Module[
    {d, x, y},
    d = {x, y};
    d /. Solve[
        SquaredDistance[d, a] == SquaredDistance[d, b] == SquaredDistance[d, c],
        {x, y}
    ][[1]]
]

(*  We can now see what this formula looks like explicitly.                   *)
CenterOfCircle[{{x1, y1}, {x2, y2}, {x3, y3}}] // FullSimplify

(*  Let's wire in the formula.                                                *)
CircleCenter[{{x1_, y1_}, {x2_, y2_}, {x3_, y3_}}] := {

    (*  The x-component of the center.                                        *)
    (
        x3^2 (-y1 + y2) + x2^2 (y1 - y3) -
        (x1^2 + (y1 - y2) (y1 - y3)) (y2 - y3)
    ) / (
        2 (x3 (-y1 + y2) + x2 (y1 - y3) + x1 (-y2 + y3))
    ),

    (*  The y-component of the center.                                        *)
    (
        -x2^2 x3 + x1^2 (-x2 + x3) + x3 (y1 - y2) (y1 + y2) +
        x1 (x2^2 - x3^2 + y2^2 - y3^2) + x2 (x3^2 - y1^2 + y3^2)
    ) / (
        2 (x3 (y1 - y2) + x1 (y2 - y3) + x2 (-y1 + y3))
    )
}

(*  Three points are collinear if the two relative position vectors are       *)
(*  parallel. This can be determine from the determinant of the matrix formed *)
(*  by the two relative position vectors.                                     *)
DetRelMat[{a_, b_, c_}] := Det[{Normalize[b - a], Normalize[c - a]}]

(*  Determine whether three points are collinear (fall on the same line).     *)
AreCollinear[{a_, b_, c_}] := Abs[DetRelMat[a, b, c]] < 10^-10

(*  The circle passing through 3 points, as a graphics object,                *)
(*  which may be an infinite line.                                            *)
GetCircle[{a_, b_, c_}] := Module[
    {d},
    If[
        AreCollinear[{a, b, c}],
        InfiniteLine[{a, b}],
        d = CircleCenter[{a, b, c}];
        Circle[d, Sqrt[SquaredDistance[d, a]]]
    ]
]

(*  Functions for testing out our circle finding routines.                    *)
ZPoint[z_] := Point[ReIm[z]]
ZCircle[{a_, b_, c_}] := Circle[ReIm /@ {a, b, c}]

Manipulate[
    Graphics[
        {
            ZCircle[{0, 1, x + I y}],
            {
                PointSize[Large],
                Red,
                ZPoint /@ {0, 1, x + I y}
            }
        },
        PlotRange -> 4, 
        Axes -> True],
        {{x, 1}, -2, 2},
        {{y, 1}, -2, 2}
]

(*  Three Circles.                                                            *)

(*  Three mutually tangent circles are parametrized by the three points of    *)
(*  tangency a, b, c. We find the individual circles by mapping a, b, c to    *)
(*  0, 1, inf, then pulling back i, (1+i)/2, 1+i to the points d, e, f where  *)
(*  the next apollonian circle will touch these three.                        *)
ApolloniusMatrix[{a_, b_, c_}] := {(b - c) {1, -a}, (b - a) {1, -c}}

(*  Helper functions.                                                         *)
h[z_] := {z, 1}
nh[{z1_, z2_}] := z1 / z2

(*  Mobius transformations of the complex plane. "Rational-Linear" functions. *)
MobiusTransform[{{a_, _}, {c_, _}}, ComplexInfinity] := a/c
MobiusTransform[m_, z_] := nh[m . h[z]]

(*  Sanity check to see what this is doing.                                   *)
MobiusTransform[
    ApolloniusMatrix[{a, b, c}], #
] & /@ {a, b, c, z, ComplexInfinity} // FullSimplify

MobiusTransform[
    Inverse[ApolloniusMatrix[{a, b, c}]], #
] & /@ {0, 1, ComplexInfinity, w, I, 1/2 (1 + I), 1 + I}

(*  Another helper function for transforming points.                          *)
PointDefinition[{a_, b_, c_}] := {
    (-I a b + (1 + I) a c - b c) /
    (a - (1 + I) b + I c),
    
    ((1 - I) a b + I a c - b c) /
    (a - I b - (1 - I) c),
    
    (a b + I (a - (1 - I) b) c) /
    ((1 + I) a - I b - c)
}

(*  Function for creating three circles from specified points.                *)
ThreeCircles[{a_, b_, c_}] := Module[
    {d, e, f},
    {d, e, f} = PointDefinition[{a, b, c}];
    ZCircle /@ {{a, e, b}, {b, f, c}, {c, d, a}}
]

(*  Test to see if this is doing what we think it is.                         *)
Manipulate[
    Graphics[
        {
            {Green, ZCircle[{0, 1, x + I y}]},
            ThreeCircles[{0, 1, x + I y}],
            {PointSize[Large], Red, Point /@ {{0, 0}, {1, 0}, {x, y}}}
        },
        PlotRange -> 4,
        Axes -> True
    ],
    {{x, 1}, -2, 2},
    {{y, 1}, -2, 2}
]

(*  Apollonius Gasket.                                                        *)

(*  The main routine for the Apollonius gasket.                               *)
Apollonius[{a_, b_, c_}] := Module[
    {d, e, f},
    {d, e, f} = def[{a, b, c}];
    {{a, e, d}, {b, f, e}, {c, d, f}}
]

(*  Let's see what this does.                                                 *)
Apollonius[{a, b, c}]

(*  More helper routines.                                                     *)
RefinePoints[abclist_] := Join @@ (Apollonius /@ abclist)

(*  This function helps create the actual output plot.                        *)
MakeCircus[{a_, b_, c_}, n_] := ThreeCircles /@ Nest[
    RefinePoints, {{a, b, c}}, n
]

(*  Test to see what it does.                                                 *)
MakeCircus[{0, 1, 1 + I}, 2]

(*  And finally, the rendering of the Apollonius gasket.                      *)
Manipulate[
    Graphics[
        {
            {Green, ZCircle[{0, 1, x + I y}]},
            MakeCircus[{0, 1, x + I y}, generations]
        },
        PlotRange -> 4*2^-zoom, 
        Axes -> True
    ],
    {{x, 1}, -2, 2},
    {{y, 1}, -2, 2},
    {{generations, 3}, 0, 6, 1},
    {{zoom, 1}, 0, 8}
]
